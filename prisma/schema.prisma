generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   Customer  (tabla: clientes)
   ========================= */
model Customer {
  id            Int        @id @default(autoincrement())
  dni           String     @unique @db.VarChar(8)
  name          String?    @db.VarChar(200)
  lastname      String?    @db.VarChar(200)
  sex           String?    @db.VarChar(1)
  age           Int?
  birthdate     DateTime?  @db.Date
  nationalityId Int?       @map("nationalityid")
  active        Boolean?   @default(true)
  createdOn     DateTime?  @default(now()) @db.Timestamp(6) @map("createdon")
  createdBy     Int?       @map("createdby")
  updatedOn     DateTime?  @db.Timestamp(6) @map("updatedon")
  updatedBy     Int?       @map("updatedby")

  // Relaciones (manteniendo nombres de FK reales con 'map')
  createdByUser User?       @relation("ClienteCreatedBy", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clientes_createdby")
  nationality   Nationality?@relation(fields: [nationalityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clientes_nationality")
  updatedByUser User?       @relation("ClienteUpdatedBy", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clientes_updatedby")

  @@map("clientes")
}

/* =============================
   Nationality (tabla: nationalities)
   ============================= */
model Nationality {
  id          Int       @id @default(autoincrement())
  description String?   @db.VarChar(200)
  active      Boolean?  @default(true)
  createdOn   DateTime? @default(now()) @db.Timestamp(6) @map("createdon")
  createdBy   Int?      @map("createdby")
  updatedOn   DateTime? @db.Timestamp(6) @map("updatedon")
  updatedBy   Int?      @map("updatedby")

  clientes    Customer[]

  createdByUser User? @relation("NationalityCreatedBy", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_nationalities_createdby")
  updatedByUser User? @relation("NationalityUpdatedBy", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_nationalities_updatedby")

  @@map("nationalities")
}

/* ================
   Role (tabla: roles)
   ================ */
model Role {
  id          Int       @id @default(autoincrement())
  description String?   @db.VarChar(50)
  active      Boolean?  @default(true)
  createdOn   DateTime? @default(now()) @db.Timestamp(6) @map("createdon")
  createdBy   Int?      @map("createdby")
  updatedOn   DateTime? @db.Timestamp(6) @map("updatedon")
  updatedBy   Int?      @map("updatedby")

  createdByUser User? @relation("RoleCreatedBy", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_roles_createdby")
  updatedByUser User? @relation("RoleUpdatedBy", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_roles_updatedby")

  users       User[]    @relation("UserRole")

  @@map("roles")
}

/* ==================
   User (tabla: users)
   ================== */
model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique @db.VarChar(50)
  password   String?
  passwordhash String @db.VarChar(191) // opcional ajustar length si querés
  email      String   @unique @db.VarChar(100)
  roleId     Int?     @map("roleid")
  name       String?  @db.VarChar(200)
  lastname   String?  @db.VarChar(200)
  active     Boolean? @default(true)
  createdOn  DateTime?@default(now()) @db.Timestamp(6) @map("createdon")
  createdBy  Int?     @map("createdby")
  updatedOn  DateTime?@db.Timestamp(6) @map("updatedon")
  updatedBy  Int?     @map("updatedby")

  // Relaciones con Cliente
  clientsCreated Customer[] @relation("ClienteCreatedBy")
  clientsUpdated Customer[] @relation("ClienteUpdatedBy")

  // Relaciones con Nationality
  nationalitiesCreated Nationality[] @relation("NationalityCreatedBy")
  nationalitiesUpdated Nationality[] @relation("NationalityUpdatedBy")

  // Relaciones con Role (quien creó/actualizó roles)
  rolesCreated Role[] @relation("RoleCreatedBy")
  rolesUpdated Role[] @relation("RoleUpdatedBy")

  // Self-relations (auditoría)
  createdByUser User?  @relation("UserCreatedBy", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_createdby")
  createdOthers User[] @relation("UserCreatedBy")

  updatedByUser User?  @relation("UserUpdatedBy", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_updatedby")
  updatedOthers User[] @relation("UserUpdatedBy")

  // Rol del usuario
  role Role? @relation("UserRole", fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_role")

  @@map("users")
}
